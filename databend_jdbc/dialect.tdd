<?xml version='1.0' encoding='utf-8' ?>
<dialect name='Databend'
         class='databend_jdbc'
         base='PostgreSQL90Dialect'
         version='18.1'>
    <function-map>
    <function group='numeric' name='ABS' return-type='real'>
      <formula>ABS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ABS' return-type='int'>
      <formula>ABS(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='ACOS' return-type='real'>
      <formula>ACOS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ASIN' return-type='real'>
      <formula>ASIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN' return-type='real'>
      <formula>ATAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ATAN2' return-type='real'>
      <formula>ATAN2(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='real'>
      <formula>CEILING(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>CEILING(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='CEILING' return-type='int'>
      <formula>CEILING(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='COS' return-type='real'>
      <formula>COS(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='COT' return-type='real'>
      <formula>CASE WHEN TAN(%1) = 0 THEN NULL ELSE 1/TAN(%1) END</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DEGREES' return-type='real'>
      <formula>(%1 * 180 / PI())</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='DIV' return-type='int'>
      <formula>intdiv(%1, nullIf(%2,0))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='EXP' return-type='real'>
      <formula>EXP(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='real'>
      <formula>FLOOR(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>FLOOR(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='FLOOR' return-type='int'>
      <formula>FLOOR(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='HEXBINX' return-type='real'>
      <formula>(((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS DECIMAL(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS DECIMAL(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) - (CASE WHEN ((%1) - (CAST( ( (%1) / 3.0 ) AS DECIMAL(18, 0) ) * 3.0) &lt; 0.0) AND ((CASE WHEN (ABS((%2) - (CAST( ( (%2) / SQRT(3.0) ) AS DECIMAL(18, 0) ) * SQRT(3.0)))) + SQRT(3.0) * ((ABS((%1) - (CAST( ( (%1) / 3.0 ) AS DECIMAL(18, 0) ) * 3.0))) - 1.0) &gt; 0.0 THEN 1.5 ELSE 0.0 END) &gt; 0.0) THEN 3.0 ELSE 0.0 END)) + (CAST( ( (%1) / 3.0 ) AS DECIMAL(18, 0) ) * 3.0))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='HEXBINY' return-type='real'>
      <formula>ROUND(
        (
          (
            (CASE
              WHEN (ABS((%2) - (ROUND((%2) / SQRT(3.0), 0) * SQRT(3.0))) + SQRT(3.0) * ((ABS((%1) - (ROUND((%1) / 3.0, 0) * 3.0))) - 1.0)) &gt; 0.0
              THEN SQRT(3.0) / 2.0
              ELSE 0.0
            END) -
            (CASE
              WHEN ((%2) - (ROUND((%2) / SQRT(3.0), 0) * SQRT(3.0)) &lt; 0.0) AND
                   ((CASE
                      WHEN (ABS((%2) - (ROUND((%2) / SQRT(3.0), 0) * SQRT(3.0))) + SQRT(3.0) * ((ABS((%1) - (ROUND((%1) / 3.0, 0) * 3.0))) - 1.0)) &gt; 0.0
                      THEN SQRT(3.0) / 2.0
                      ELSE 0.0
                    END) &gt; 0.0)
              THEN SQRT(3.0)
              ELSE 0.0
            END)
          ) +
          (ROUND((%2) / SQRT(3.0), 0) * SQRT(3.0))
        ),
        3
      )</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LN' return-type='real'>
      <formula>if(%1 &gt; 0, LN(%1), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>if(%1 &gt; 0, LOG10(%1), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG' return-type='real'>
      <formula>if(%1 &gt; 0 AND %2 &gt; 0, LN(%1) / LN(%2), NULL)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='LOG2' return-type='real'>
      <formula>if(%1 &gt; 0, LOG2(%1), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='real'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MAX' return-type='int'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MIN' return-type='real'>
      <formula>LEAST(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='MIN' return-type='int'>
      <formula>LEAST(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='MOD' return-type='int'>
      <formula>MOD(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='PI' return-type='real'>
      <formula>PI()</formula>
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POWER(%1,%2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POWER(%1,%2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='POWER' return-type='real'>
      <formula>POWER(%1,%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='numeric' name='RADIANS' return-type='real'>
      <formula>(%1 * atan(1) / 45)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='RAND' return-type='int'>
      <formula>rand()</formula>
    </function>
    <function group='numeric' name='RANDOM' return-type='real'>
      <formula>rand()/4294967295</formula>
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>randConstant()</formula>
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>randConstant(%1)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>randConstant(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>randConstant(%1)</formula>
      <argument type='str' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>randConstant(%1)</formula>
      <argument type='bool' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>randConstant(%1)</formula>
      <argument type='date' />
    </function>
    <function group='numeric' name='RAND_CONSTANT' return-type='int'>
      <formula>randConstant(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='ROUND' return-type='real'>
      <formula>ROUND(CAST(%1 AS DECIMAL(18, 2)), %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='numeric' name='SIGN' return-type='int'>
      <formula>SIGN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SIN' return-type='real'>
      <formula>SIN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQRT' return-type='real'>
      <formula>if(%1 &gt;= 0, SQRT(%1), NULL)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='real'>
      <formula>POWER(%1,2)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='SQUARE' return-type='int'>
      <formula>POWER(%1, 2)</formula>
      <argument type='int' />
    </function>
    <function group='numeric' name='TAN' return-type='real'>
      <formula>TAN(%1)</formula>
      <argument type='real' />
    </function>
    <function group='numeric' name='TRUNC' return-type='real'>
      <formula>TRUNCATE(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='real'>
      <formula>ifNull(%1, 0)</formula>
      <argument type='real' />
    </function>
    <function group='numeric;logical' name='ZN' return-type='int'>
      <formula>ifNull(%1, 0)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='BAR' return-type='str'>
      <formula>bar(%1, %2, %3, %4)</formula>
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>char(%1)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='CHAR' return-type='str'>
      <formula>char(%1)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='DOMAIN' return-type='str'>
      <formula>domain(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='ENDSWITH' return-type='bool'>
      <formula>CASE WHEN %1 LIKE CONCAT('%', %2) THEN TRUE ELSE FALSE END</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>POSITION(%2 IN %1)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='FIND' return-type='int'>
      <formula>POSITION(%2 IN %1)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>

    <function group='string' name='FIND' return-type='int'>
      <formula>
        CASE
          WHEN %3 IS NULL OR %3 <= 1 THEN POSITION(%2 IN %1)
          ELSE POSITION(%2 IN SUBSTRING(%1 FROM CAST(%3 AS Nullable(UInt8)))) + CAST(%3 AS Nullable(UInt8)) - 1
        END
      </formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>

    <function group='string' name='CONTAINS' return-type='bool'>
      <formula>POSITION(%2 IN %1) > 0</formula>
      <argument type='str' />
      <argument type='str' />
    </function>

    <function group='string' name='FINDNTH' return-type='int'>
      <formula>multiIf(countSubstrings(%1, %2) &lt; CAST(%3 AS Nullable(UInt8)), 0, length(replaceRegexpAll(to_String(arrayResize(splitByString(%2, %1), CAST(%3 AS Nullable(UInt8)))), '[\[\]\'\,]' , '')) + length(%2) * (CAST(%3 AS Nullable(UInt8)) - 1) + 1)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='FINDNTH' return-type='int'>
      <formula>multiIf(countSubstrings(%1, %2) &lt; %3, 0, length(replaceRegexpAll(to_String(arrayResize(splitByString(%2, %1), %3)), '[\[\]\'\,]' , '')) + length(%2) * (%3 - 1) + 1)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='datetime' name='EXTRACT' return-type='real'>
      <formula>CASE
        WHEN UPPER(%1) = 'EPOCH' THEN DATE_DIFF('SECOND', '1970-01-01 00:00:00', %2)
        ELSE DATE_DIFF(UPPER(%1), '1970-01-01 00:00:00', %2)
      END</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </function>
    <function group='string' name='FORMAT_READABLE_TIMEDELTA' return-type='str'>
      <formula>formatReadableTimeDelta(%1)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='FORMAT_READABLE_TIMEDELTA' return-type='str'>
      <formula>formatReadableTimeDelta(%1, %2)</formula>
      <argument type='int' />
      <argument type='str' />
    </function>
    <function group='string' name='FORMAT_READABLE_QUANTITY' return-type='str'>
      <formula>formatReadableQuantity(%1)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='GET_JSON_OBJECT' return-type='str'>
      <formula>JSONExtractRaw(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='GET_SETTING' return-type='str'>
      <formula>getSetting(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='HEX' return-type='str'>
      <formula>hex(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='HOST' return-type='str'>
      <formula>netloc(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>CASE WHEN IS_NULL(%2) OR %2 &lt; 1 THEN NULL&#10; ELSE SUBSTRING(%1,1,CAST(TRUNCATE(%2, 0) AS Nullable(INTEGER))) END</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='LEFT' return-type='str'>
      <formula>CASE WHEN IS_NULL(%2) OR %2 &lt; 1 THEN NULL&#10; ELSE SUBSTRING(%1,1,%2) END</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='LEN' return-type='int'>
      <formula>CHAR_LENGTH(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LOWER' return-type='str'>
      <formula>LOWER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='LTRIM' return-type='str'>
      <formula>LTRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='MAX' return-type='str'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='MID' return-type='str'>
      <formula>SUBSTR(%1, CAST(IF(CAST(%2 AS INT) &lt; 1, 1, CAST(%2 AS INT)) AS INT))</formula>
      <argument type='str' />
      <argument type='real' />
    </function>

    <function group='string' name='MID' return-type='str'>
      <formula>SUBSTR(%1, %2)</formula>
      <argument type='str' />
      <argument type='int' />
    </function>

    <function group='string' name='MID' return-type='str'>
      <formula>SUBSTR(%1, CAST(IF(CAST(%2 AS INT) &lt; 1, 1, CAST(%2 AS INT)) AS INT), CAST(%3 AS INT))</formula>
      <argument type='str' />
      <argument type='real' />
      <argument type='real' />
    </function>

    <function group='string' name='MID' return-type='str'>
      <formula>SUBSTR(%1, IF(%2 &lt; 1, 1, %2), %3)</formula>
      <argument type='str' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='string' name='MIN' return-type='str'>
      <formula>LEAST(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='PARSE_URL_QUERY' return-type='str'>
      <formula>extractURLParameter(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REGEXP_EXTRACT_NTH' return-type='str'>
      <formula>CAST(
        CASE
          WHEN %3 < 0 THEN
            array_get(
              array_flatten(regexp_extract_all(%1, %2, 'g')),
              array_length(array_flatten(regexp_extract_all(%1, %2, 'g'))) + %3
            )
          ELSE
            array_get(array_flatten(regexp_extract_all(%1, %2, 'g')), %3)
        END
        AS VARCHAR)
      </formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='localint' />
    </function>

    <function group='string' name='SPLIT' return-type='str'>
      <formula>CAST(
        CASE
          WHEN %3 < 0 THEN
            array_get(
              SPLIT(COALESCE(%1,''), '%2'),
              array_length(SPLIT(COALESCE(%1,''), '%2')) + %3
            )
          ELSE
            array_get(SPLIT(COALESCE(%1,''), '%2'), %3)
        END
        AS VARCHAR)
      </formula>
      <argument type='str' />
      <argument type='localstr' />
      <argument type='localint' />
    </function>

    <function group='string' name='REGEXP_MATCH' return-type='bool'>
      <formula>match(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='REPLACE' return-type='str'>
      <formula>REPLACE(%1,%2,%3)</formula>
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>CASE WHEN IS_NULL(%2) OR CAST(TRUNCATE(%2, 0) AS Nullable(INTEGER)) &lt; 1 THEN NULL&#10; ELSE SUBSTRING(%1,-CAST(TRUNCATE(%2, 0) AS Nullable(INTEGER))) END</formula>
      <argument type='str' />
      <argument type='real' />
    </function>
    <function group='string' name='RIGHT' return-type='str'>
      <formula>CASE WHEN IS_NULL(%2) OR %2 &lt; 1 THEN NULL&#10; ELSE SUBSTRING(%1,-%2) END</formula>
      <argument type='str' />
      <argument type='int' />
    </function>
    <function group='string' name='RTRIM' return-type='str'>
      <formula>RTRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='SHA256' return-type='str'>
      <formula>SHA256(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>repeat(&apos; &apos;,CASE WHEN IS_NULL(%1) OR %1 &lt; 1 THEN NULL&#10; ELSE TRY_CAST(%1 AS Nullable(UInt8)) END)</formula>
      <argument type='real' />
    </function>
    <function group='string' name='SPACE' return-type='str'>
      <formula>repeat(&apos; &apos;,CASE WHEN IS_NULL(%1) OR %1 &lt; 1 THEN NULL&#10; ELSE TRY_CAST(%1 AS Nullable(UInt8)) END)</formula>
      <argument type='int' />
    </function>
    <function group='string' name='STARTSWITH' return-type='bool'>
      <formula>LTRIM(%1) LIKE CONCAT(%2, '%')</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='string' name='TRIM' return-type='str'>
      <formula>TRIM(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UNHEX' return-type='str'>
      <formula>unhex(%1)</formula>
      <argument type='str' />
    </function>
    <function group='string' name='UPPER' return-type='str'>
      <formula>UPPER(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
       <formula>to_Date(to_String(date_add(day, CAST(%1 AS Nullable(Int32)) - 25567, '1970-01-01')))</formula>
       <argument type='real' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>to_Date(%1 - 25567)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>to_Date(%1)</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>TRY_CAST(%1 AS Nullable(DATE))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='DATE' return-type='date'>
      <formula>TRY_CAST(%1 AS Nullable(DATE))</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>TO_DATETIME((CAST(%1 AS DOUBLE) - 25567) * 86400.0)</formula>
      <argument type='real' />
    </function>

    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>TO_DATETIME((CAST(%1 AS DOUBLE) - 25567) * 86400.0)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='DATETIME' return-type='datetime'>
      <formula>TRY_CAST(%1 AS Nullable(TIMESTAMP))</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>TRY_CAST(%1 AS Nullable(Float64))</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>TRY_CAST(%1 AS Nullable(DOUBLE))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>TRY_CAST(%1 AS Nullable(DOUBLE))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>TRY_CAST(%1 AS Nullable(DOUBLE))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='FLOAT' return-type='real'>
      <formula>
        DATE_DIFF('DAY', '1970-01-01', %1) + (365 * 70 + 17)
      </formula>
      <argument type='date' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>TRY_CAST(%1 AS Nullable(UInt8))</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>TRY_CAST(TRUNCATE(%1, 0) AS Nullable(INT))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS Nullable(INT))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(CAST(%1 AS Nullable(Float)) AS Nullable(INTEGER))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(CAST(%1 AS Nullable(Date)) AS Nullable(INTEGER)) + 25567</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='INT' return-type='int'>
      <formula>CAST(%1 AS Nullable(INT)) + 25567</formula>
      <argument type='date' />
    </function>
    <function group='cast' name='REAL' return-type='real'>
      <formula>to_Float64(%1)</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>to_String(%1)</formula>
      <argument type='bool' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(to_String(%1) AS Nullable(String))</formula>
      <argument type='real' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(to_String(%1) AS Nullable(String))</formula>
      <argument type='int' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(%1 AS Nullable(String))</formula>
      <argument type='str' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(to_String(%1) AS Nullable(String))</formula>
      <argument type='datetime' />
    </function>
    <function group='cast' name='STR' return-type='str'>
      <formula>CAST(to_String(%1) AS Nullable(String))</formula>
      <argument type='date' />
    </function>
    <function group='logical' name='IFNULL' return-type='bool'>
      <formula>ifNull(%1, %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IFNULL' return-type='real'>
      <formula>ifNull(%1, %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IFNULL' return-type='int'>
      <formula>ifNull(%1, %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IFNULL' return-type='str'>
      <formula>ifNull(%1, %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IFNULL' return-type='date'>
      <formula>ifNull(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='bool'>
      <formula>((%1 AND %2) OR ((NOT %1) AND %3))</formula>
      <argument type='bool' />
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='real'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END</formula>
      <argument type='bool' />
      <argument type='real' />
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='int'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END</formula>
      <argument type='bool' />
      <argument type='int' />
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='str'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END</formula>
      <argument type='bool' />
      <argument type='str' />
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='datetime'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END</formula>
      <argument type='bool' />
      <argument type='datetime' />
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='date'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END</formula>
      <argument type='bool' />
      <argument type='date' />
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='logical' name='IIF' return-type='spatial'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE NULL END</formula>
      <argument type='bool' />
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='IIF' return-type='spatial'>
      <formula>CASE WHEN %1 THEN %2 WHEN NOT %1 THEN %3 ELSE %4 END</formula>
      <argument type='bool' />
      <argument type='spatial' />
      <argument type='spatial' />
      <argument type='spatial' />
    </function>
    <function group='logical' name='IS_NULL' return-type='bool'>
      <formula>IS_NULL(%1)</formula>
      <argument type='bool' />
    </function>
    <function group='logical' name='IS_NULL' return-type='bool'>
      <formula>IS_NULL(%1)</formula>
      <argument type='real' />
    </function>
    <function group='logical' name='IS_NULL' return-type='bool'>
      <formula>IS_NULL(%1)</formula>
      <argument type='str' />
    </function>
    <function group='logical' name='IS_NULL' return-type='bool'>
      <formula>IS_NULL(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='logical' name='IS_NULL' return-type='bool'>
      <formula>IS_NULL(%1)</formula>
      <argument type='spatial' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>avg(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='AVG' return-type='real'>
      <formula>avg(CAST(%1 AS Nullable(DOUBLE)))</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='AVG_IF' return-type='real'>
      <formula>AVG_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='AVG_IF' return-type='real'>
      <formula>AVG_IF(CAST(%1 AS Nullable(DOUBLE)),%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='CORR' return-type='real'>
      <formula>CORR(%1, %2)</formula>
      <unagg-formula>CAST(NULL AS Nullable(DOUBLE))</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNT' return-type='int'>
      <formula>count(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>COUNT_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>COUNT_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>COUNT_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>COUNT_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='str' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>COUNT_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='datetime' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNT_IF' return-type='int'>
      <formula>COUNT_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='date' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD' return-type='int'>
      <formula>COUNT(DISTINCT %1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='bool' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ' return-type='int'>
      <formula>uniq(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='COUNTD_MERGE' return-type='int'>
      <formula>uniqExactMerge(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COUNTD_UNIQ_MERGE' return-type='int'>
      <formula>uniqMerge(%1)</formula>
      <unagg-formula>IS_NOT_NULL(%1)</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='COVAR' return-type='real'>
      <formula>covarSamp(%1, %2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='COVARP' return-type='real'>
      <formula>covarPop(%1, %2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='aggregate' name='GROUP_CONCAT' return-type='str'>
      <formula>replaceRegexpAll(to_String(arraySort(groupUniqArray(%1))), '[\[\]\']' , '')</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='real'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MAX' return-type='int'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MAX' return-type='str'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MAX' return-type='datetime'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MAX' return-type='date'>
      <formula>max(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='bool'>
      <formula>MAX_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='real'>
      <formula>MAX_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='int'>
      <formula>MAX_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='str'>
      <formula>MAX_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='str' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='datetime'>
      <formula>MAX_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='datetime' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MAX_IF' return-type='date'>
      <formula>MAX_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='date' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MEDIAN' return-type='real'>
      <formula>QUANTILE_DISC(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MEDIAN' return-type='int'>
      <formula>QUANTILE_DISC(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MEDIAN_EXACT' return-type='real'>
      <formula>quantileExact(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MEDIAN_EXACT' return-type='int'>
      <formula>quantileExact(0.5)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='real'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='MIN' return-type='int'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='MIN' return-type='str'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='str' />
    </function>
    <function group='aggregate' name='MIN' return-type='datetime'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='datetime' />
    </function>
    <function group='aggregate' name='MIN' return-type='date'>
      <formula>min(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='date' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='bool'>
      <formula>MIN_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='real'>
      <formula>MIN_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='int'>
      <formula>MIN_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='str'>
      <formula>MIN_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='str' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='datetime'>
      <formula>MIN_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='datetime' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='MIN_IF' return-type='date'>
      <formula>MIN_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='date' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>QUANTILE_DISC(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='PERCENTILE' return-type='real'>
      <formula>QUANTILE_DISC(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='PERCENTILE_EXACT' return-type='real'>
      <formula>quantileExact(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='PERCENTILE_EXACT' return-type='real'>
      <formula>quantileExact(%2)(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
      <argument type='localreal' />
    </function>
    <function group='aggregate' name='SKEWNESS' return-type='real'>
      <formula>skewSamp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SKEWNESS' return-type='real'>
      <formula>skewSamp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='SKEWNESSP' return-type='real'>
      <formula>skewPop(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SKEWNESSP' return-type='real'>
      <formula>skewPop(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='STDEV' return-type='real'>
      <formula>stddevSamp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='STDEVP' return-type='real'>
      <formula>stddevPop(%1)</formula>
      <unagg-formula>(%1 * 0.0)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='real'>
      <formula>sum(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='SUM' return-type='int'>
      <formula>sum(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='int' />
    </function>
    <function group='aggregate' name='SUM_IF' return-type='real'>
      <formula>SUM_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='real' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='SUM_IF' return-type='int'>
      <formula>SUM_IF(%1,%2)</formula>
      <unagg-formula>NULL</unagg-formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='aggregate' name='VAR' return-type='real'>
      <formula>varSamp(%1)</formula>
      <unagg-formula>%1</unagg-formula>
      <argument type='real' />
    </function>
    <function group='aggregate' name='VARP' return-type='real'>
      <formula>varPop(%1)</formula>
      <unagg-formula>(%1 * 0.0)</unagg-formula>
      <argument type='real' />
    </function>
    <function group='operator' name='!' return-type='bool'>
      <formula>(NOT %1)</formula>
      <argument type='bool' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(TIMESTAMP(%1) &lt;&gt; %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='!=' return-type='bool'>
      <formula>(%1 &lt;&gt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&amp;&amp;' return-type='bool'>
      <formula>(%1 AND %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='*' return-type='real'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='*' return-type='int'>
      <formula>(%1 * %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='real'>
      <formula>(%1 + %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='int'>
      <formula>(%1 + %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='+' return-type='str'>
      <formula>concat(%1,%2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>(CAST(%1 AS Nullable(DATETIME)) + %2 * 86400.0)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='+' return-type='datetime'>
      <formula>CAST(date_add(day,%2,%1) AS Nullable(TIMESTAMP))</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(-%1)</formula>
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='real'>
      <formula>(%1 - %2) / 86400.0</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(-%1)</formula>
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='int'>
      <formula>(%1 - %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>date_add(second, - %2 * 86400, %1)</formula>
      <argument type='datetime' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>date_add(second, - %2 * 86400, %1)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>
    <function group='operator' name='-' return-type='datetime'>
      <formula>date_add(second, - %2 * 86400, %1)</formula>
      <argument type='date' />
      <argument type='real' />
    </function>
    <function group='operator' name='-' return-type='date'>
      <formula>to_Date(date_add(second, - %2 * 86400, %1))</formula>
      <argument type='date' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(to_Float64(%1) / nullIf(%2,0))</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / nullIf(%2,0))</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / nullIf(%2,0))</formula>
      <argument type='int' />
      <argument type='real' />
    </function>
    <function group='operator' name='/' return-type='real'>
      <formula>(%1 / nullIf(%2,0))</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(TIMESTAMP(%1) &lt; %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; CAST(%2 AS Nullable(TIMESTAMP)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(CAST(%1 AS Nullable(TIMESTAMP)) &lt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;' return-type='bool'>
      <formula>(%1 &lt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(TIMESTAMP(%1) &lt;= %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= CAST(%2 AS Nullable(TIMESTAMP)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(CAST(%1 AS Nullable(TIMESTAMP)) &lt;= %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&lt;=' return-type='bool'>
      <formula>(%1 &lt;= %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 AND %2 OR NOT %1 AND NOT %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 AND %2 &lt;&gt; 0 OR NOT %1 AND %2 = 0)</formula>
      <argument type='bool' />
      <argument type='int' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 &lt;&gt; 0 AND %2 OR %1 = 0 AND NOT %2)</formula>
      <argument type='int' />
      <argument type='bool' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(TIMESTAMP(%1) = %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='==' return-type='bool'>
      <formula>(%1 = %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(TIMESTAMP(%1) &gt; %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; CAST(%2 AS Nullable(TIMESTAMP)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(CAST(%1 AS Nullable(TIMESTAMP)) &gt; %2)</formula>
      <argument type='date' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;' return-type='bool'>
      <formula>(%1 &gt; %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='str' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(TIMESTAMP(%1) &gt;= %2)</formula>
      <argument type='str' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= TIMESTAMP(%2))</formula>
      <argument type='datetime' />
      <argument type='str' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= CAST(%2 AS Nullable(TIMESTAMP)))</formula>
      <argument type='datetime' />
      <argument type='date' />
    </function>
    <function group='operator' name='&gt;=' return-type='bool'>
      <formula>(%1 &gt;= %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND TRUNCATE(%2, 0) &lt;&gt; %2 THEN NULL ELSE POWER(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='real' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>(CASE WHEN %1 &lt; 0 AND FLOOR(%2) &lt;&gt; %2 THEN NULL ELSE POWER(%1,%2) END)</formula>
      <argument type='real' />
      <argument type='int' />
    </function>
    <function group='operator' name='^^' return-type='real'>
      <formula>POWER(CAST(%1 as float),%2)</formula>
      <argument type='int' />
      <argument type='int' />
    </function>
    <function group='operator' name='||' return-type='bool'>
      <formula>(%1 OR %2)</formula>
      <argument type='bool' />
      <argument type='bool' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>to_Day_Of_Month(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='DAY' return-type='int'>
      <formula>to_Day_Of_Month(%1)</formula>
      <argument type='date' />
    </function>
    <function group='date' name='MAX' return-type='datetime'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MAX' return-type='date'>
      <formula>GREATEST(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MIN' return-type='datetime'>
      <formula>LEAST(%1, %2)</formula>
      <argument type='datetime' />
      <argument type='datetime' />
    </function>
    <function group='date' name='MIN' return-type='date'>
      <formula>LEAST(%1, %2)</formula>
      <argument type='date' />
      <argument type='date' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>to_Month(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='MONTH' return-type='int'>
      <formula>to_Month(%1)</formula>
      <argument type='date' />
    </function>
    <function group='date' name='NOW' return-type='datetime'>
      <formula>NOW()</formula>
    </function>
    <function group='date' name='TODAY' return-type='date'>
      <formula>today()</formula>
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>to_Year(%1)</formula>
      <argument type='datetime' />
    </function>
    <function group='date' name='YEAR' return-type='int'>
      <formula>to_Year(%1)</formula>
      <argument type='date' />
    </function>
    <!--
      date-function
      Doesn't require a group. Can contain multiple formulas
      for different date parts. If a part-specific formula is missing, Tableau
      will use the generic (no part attribute) formula.
    -->
    <date-function name='DATEADD' return-type='datetime'>
      <formula part='year'>DATE_ADD('YEAR', CAST(%2 AS INT), %3)</formula>
      <formula part='quarter'>DATE_ADD('QUARTER', CAST(%2 AS INT), %3)</formula>
      <formula part='month'>DATE_ADD('MONTH', CAST(%2 AS INT), %3)</formula>
      <formula part='day'>DATE_ADD('DAY', CAST(%2 AS INT), %3)</formula>
      <formula part='dayofyear'>DATE_ADD('DAY', CAST(%2 AS INT), %3)</formula>
      <formula part='weekday'>DATE_ADD('DAY', CAST(%2 AS INT), %3)</formula>
      <formula part='week'>DATE_ADD('WEEK', CAST(%2 AS INT), %3)</formula>
      <formula part='hour'>DATE_ADD('HOUR', CAST(%2 AS INT), %3)</formula>
      <formula part='minute'>DATE_ADD('MINUTE', CAST(%2 AS INT), %3)</formula>
      <formula part='second'>DATE_ADD('SECOND', CAST(%2 AS INT), %3)</formula>
      <argument type='localstr' />
      <argument type='real' />
      <argument type='datetime' />
    </date-function>
    <!-- 日期加天数 -->
    <function group='date' name='DATEADD' return-type='date'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) DAY)</formula>
      <argument type='date' />
      <argument type='int' />
    </function>

    <!-- 日期时间加天数 -->
    <function group='date' name='DATEADD' return-type='datetime'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) DAY)</formula>
      <argument type='datetime' />
      <argument type='int' />
    </function>

    <!-- 日期加月数 -->
    <function group='date' name='DATEADD' return-type='date'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) MONTH)</formula>
      <argument type='date' />
      <argument type='int' />
      <argument literal='month' />
    </function>

    <!-- 日期时间加月数 -->
    <function group='date' name='DATEADD' return-type='datetime'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) MONTH)</formula>
      <argument type='datetime' />
      <argument type='int' />
      <argument literal='month' />
    </function>

    <!-- 日期加年数 -->
    <function group='date' name='DATEADD' return-type='date'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) YEAR)</formula>
      <argument type='date' />
      <argument type='int' />
      <argument literal='year' />
    </function>

    <!-- 日期时间加年数 -->
    <function group='date' name='DATEADD' return-type='datetime'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) YEAR)</formula>
      <argument type='datetime' />
      <argument type='int' />
      <argument literal='year' />
    </function>

    <!-- 日期加季度数 -->
    <function group='date' name='DATEADD' return-type='date'>
      <formula>DATE_ADD(%1, INTERVAL CAST((%2 * 3) AS VARCHAR) MONTH)</formula>
      <argument type='date' />
      <argument type='int' />
      <argument literal='quarter' />
    </function>

    <!-- 日期时间加季度数 -->
    <function group='date' name='DATEADD' return-type='datetime'>
      <formula>DATE_ADD(%1, INTERVAL CAST((%2 * 3) AS VARCHAR) MONTH)</formula>
      <argument type='datetime' />
      <argument type='int' />
      <argument literal='quarter' />
    </function>

    <!-- 日期时间加小时数 -->
    <function group='date' name='DATEADD' return-type='datetime'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) HOUR)</formula>
      <argument type='datetime' />
      <argument type='int' />
      <argument literal='hour' />
    </function>

    <!-- 日期时间加分钟数 -->
    <function group='date' name='DATEADD' return-type='datetime'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) MINUTE)</formula>
      <argument type='datetime' />
      <argument type='int' />
      <argument literal='minute' />
    </function>

    <!-- 日期时间加秒数 -->
    <function group='date' name='DATEADD' return-type='datetime'>
      <formula>DATE_ADD(%1, INTERVAL CAST(%2 AS VARCHAR) SECOND)</formula>
      <argument type='datetime' />
      <argument type='int' />
      <argument literal='second' />
    </function>
    <date-function name='DATEDIFF' return-type='int'>
      <formula>CAST(date_Diff('%1', %2, %3) AS Nullable(INTEGER))</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATENAME' return-type='str'>
      <formula part='year'>CAST(to_Year(%2) AS STRING)</formula>
      <formula part='quarter'>CAST(to_Quarter(%2) AS STRING)</formula>
      <formula part='month'>TO_MONTH(%2)</formula>
      <formula part='dayofyear'>CAST(to_Day_Of_Year(%2) AS STRING)</formula>
      <formula part='day'>CAST(to_Day_Of_Month(%2) AS STRING)</formula>
      <formula part='weekday'>TO_DAY_OF_WEEK(%2)</formula>
      <formula part='week'>CAST(FLOOR((7 + EXTRACT(DOY FROM %2) - 1 + EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2))) / 7) AS TEXT)</formula>
      <formula part='hour'>CAST(to_Hour(%2) AS STRING)</formula>
      <formula part='minute'>CAST(to_Minute(%2) AS STRING)</formula>
      <formula part='second'>CAST(to_Second(%2) AS STRING)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEPARSE' return-type='datetime'>
      <formula>to_Timestamp(%2)</formula>
      <argument type='localstr' />
      <argument type='str' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_Year(%2)</formula>
      <formula part='quarter'>to_Quarter(%2)</formula>
      <formula part='month'>to_Month(%2)</formula>
      <formula part='dayofyear'>to_Day_Of_Year(%2)</formula>
      <formula part='day'>to_Day_Of_Month(%2)</formula>
      <formula part='weekday'>to_Day_Of_Week(%2)</formula>
      <formula part='week'>
      FLOOR((7 + EXTRACT(DOY FROM %2) - 1 + (CASE WHEN %3='sunday' THEN EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2)) ELSE (CAST(7 + EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2)) - 1 AS BIGINT) % 7) END)) / 7)
      </formula>
      <formula part='hour'>to_Hour(%2)</formula>
      <formula part='minute'>to_Minute(%2)</formula>
      <formula part='second'>to_Second(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_Year(%2)</formula>
      <formula part='quarter'>to_Quarter(%2)</formula>
      <formula part='month'>to_Month(%2)</formula>
      <formula part='dayofyear'>to_Day_Of_Year(%2)</formula>
      <formula part='day'>to_Day_Of_Month(%2)</formula>
      <formula part='weekday'>to_Day_Of_Week(%2)</formula>
      <formula part='week'>FLOOR((7 + EXTRACT(DOY FROM %2) - 1 + EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2))) / 7)</formula>
      <formula part='hour'>to_Hour(%2)</formula>
      <formula part='minute'>to_Minute(%2)</formula>
      <formula part='second'>to_Second(%2)</formula>
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_Year(%2)</formula>
      <formula part='quarter'>to_Quarter(%2)</formula>
      <formula part='month'>to_Month(%2)</formula>
      <formula part='dayofyear'>to_Day_Of_Year(%2)</formula>
      <formula part='day'>to_Day_Of_Month(%2)</formula>
      <formula part='weekday'>to_Day_Of_Week(%2)</formula>
      <formula part='week'>FLOOR((7 + EXTRACT(DOY FROM %2) - 1 + (CASE WHEN %3='sunday' THEN EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2)) ELSE (CAST(7 + EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2)) - 1 AS BIGINT) % 7) END)) / 7)</formula>
      <formula part='hour'>to_Hour(%2)</formula>
      <formula part='minute'>to_Minute(%2)</formula>
      <formula part='second'>to_Second(%2)</formula>
      <argument type='localstr' />
      <argument type='datetime' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATEPART' return-type='int'>
      <formula part='year'>to_Year(%2)</formula>
      <formula part='quarter'>to_Quarter(%2)</formula>
      <formula part='month'>to_Month(%2)</formula>
      <formula part='dayofyear'>to_Day_Of_Year(%2)</formula>
      <formula part='day'>to_Day_Of_Month(%2)</formula>
      <formula part='weekday'>to_Day_Of_Week(%2)</formula>
      <formula part='week'>FLOOR((7 + EXTRACT(DOY FROM %2) - 1 + (CASE WHEN %3='sunday' THEN EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2)) ELSE (CAST(7 + EXTRACT(DOW FROM DATE_TRUNC('YEAR', %2)) - 1 AS BIGINT) % 7) END)) / 7)</formula>
      <formula part='hour'>to_Hour(%2)</formula>
      <formula part='minute'>to_Minute(%2)</formula>
      <formula part='second'>to_Second(%2)</formula>
      <argument type='localstr' />
      <argument type='date' />
      <argument type='localstr' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula part='year'>to_Start_Of_Year(%2)</formula>
      <formula part='quarter'>to_Start_Of_Quarter(%2)</formula>
      <formula part='month'>to_Start_Of_Month(%2)</formula>
      <formula part='day'>to_Start_Of_Day(%2)</formula>
      <formula part='dayofyear'>to_Start_Of_Day(%2)</formula>
      <formula part='weekday'>to_Start_Of_Day(%2)</formula>
      <formula part='week'>to_Start_Of_Week(%2)</formula>
      <formula part='hour'>to_Start_Of_Hour(%2)</formula>
      <formula part='minute'>to_Start_Of_Minute(%2)</formula>
      <formula part='second'>%2</formula>
      <argument type='localstr' />
      <argument type='datetime' />
    </date-function>
    <date-function name='DATETRUNC' return-type='datetime'>
      <formula part='year'>to_Start_Of_Year(%2)</formula>
      <formula part='quarter'>to_Start_Of_Quarter(%2)</formula>
      <formula part='month'>to_Start_Of_Month(%2)</formula>
      <formula part='day'>to_Start_Of_Day(%2)</formula>
      <formula part='dayofyear'>to_Start_Of_Day(%2)</formula>
      <formula part='weekday'>to_Start_Of_Day(%2)</formula>
      <formula part='week'>to_Start_Of_Week(%2)</formula>
      <formula part='hour'>to_Start_Of_Hour(%2)</formula>
      <formula part='minute'>to_Start_Of_Minute(%2)</formula>
      <formula part='second'>%2</formula>
      <argument type='localstr' />
      <argument type='date' />
    </date-function>
  </function-map>
  <!--
    supported-aggregations
    Comprehensive list of supported aggregations and date truncations
  -->
  <!--
  <supported-aggregations>
    <aggregation value='AGG_COUNT'/>
    <aggregation value='AGG_COUNTD'/>
    <aggregation value='AGG_SUM'/>
    <aggregation value='AGG_AVG'/>
    <aggregation value='AGG_MIN'/>
    <aggregation value='AGG_MAX'/>
    <aggregation value='AGG_STDEV'/>
    <aggregation value='AGG_STDEVP'/>
    <aggregation value='AGG_VAR'/>
    <aggregation value='AGG_VARP'/>
    <aggregation value='AGG_COVAR'/>
    <aggregation value='AGG_COVARP'/>
    <aggregation value='AGG_CORR'/>
    <aggregation value='AGG_SUM_XSQR'/>
    <aggregation value='AGG_ATTR'/>
    <aggregation value='AGG_MEDIAN'/>
    <aggregation value='AGG_PERCENTILE'/>
    <aggregation value='AGG_SKEWNESS'/>

    <aggregation value='AGG_KURTOSIS'/>
    <aggregation value='AGG_YEAR'/>
    <aggregation value='AGG_QTR'/>
    <aggregation value='AGG_MONTH'/>
    <aggregation value='AGG_DAY'/>
    <aggregation value='AGG_WEEK'/>
    <aggregation value='AGG_WEEKDAY'/>
    <aggregation value='AGG_MONTHYEAR'/>
    <aggregation value='AGG_MDY'/>
    <aggregation value='AGG_HOUR'/>
    <aggregation value='AGG_MINUTE'/>
    <aggregation value='AGG_SECOND'/>
   </supported-aggregations>
    -->

  <!--
    sql-format
    Strategies and formulas for SQL expressions that
    are too complex for simple function mapping
  -->
  <sql-format>
    <!--
      date-parts
      Used with generic (non-part-specific) date function formulas.
      A date-part-group can apply to one or more date functions, denoted
      by date-function child elements. If none are specified, the group
      acts as the default.

      The name attribute specifies a Tableau date part, while the
      value attribute contains the date part string literal to use in
      corresponding date functions.
    -->
    <date-parts>
      <date-part-group>
        <!-- Default: used by DATEPART and DATENAME -->
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='dayofyear' />
        <part name='week' value='week' />
        <part name='weekday' value='weekday' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEADD' />
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='day' />
        <part name='week' value='week' />
        <part name='weekday' value='day' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATEDIFF' />
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='day' />
        <part name='week' value='week' />
        <part name='weekday' value='day' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
      <date-part-group>
        <date-function name='DATETRUNC' />
        <part name='year' value='year' />
        <part name='quarter' value='quarter' />
        <part name='month' value='month' />
        <part name='day' value='day' />
        <part name='dayofyear' value='day' />
        <part name='week' value='week' />
        <part name='weekday' value='day' />
        <part name='hour' value='hour' />
        <part name='minute' value='minute' />
        <part name='second' value='second' />
      </date-part-group>
    </date-parts>
    <!--
      format-date-literal
      Specifies a formula for expressing a date literal, as well as an *ICU* date format.
      %1 is the format string and %2 is the formatted date literal.
    -->
   <format-date-literal formula="DATE '%1'" format='yyyy-MM-dd' />
   <format-datetime-literal formula="CAST('%1' AS Nullable(TIMESTAMP))" format='yyyy-MM-dd HH:mm:ss' />
    <!--
      format-is-distinct
      Defines a strategy for determining whether two values are distinct.
      NoNullCheck: (lhs [!]= rhs)
      Keyword: (lhs IS [NOT ]DISTINCT FROM rhs)
      Operator: ([NOT (]lhs <=> rhs[)])
      [Default]Formula: ((lhs [!]= rhs) OR[AND] (lhs IS [NOT] NULL AND[OR] rhs IS [NOT] NULL))
    -->
    <format-is-distinct value='NoNullCheck' />
    <!--
      format-order-by
      [Default]DirectionOnly: ORDER BY col ASC/DESC
      Nulls: ORDER BY col ASC NULLS FIRST/DESC NULLS LAST
    -->
    <format-order-by value='Nulls' />
    <!--
      format-select
      Piece-by-piece formula for defining a SELECT statement
    -->
    <format-select>
      <part name='Top' value='SELECT * FROM (' />
      <part name='TopSampleRecords' value='WITH t1 AS (SELECT rowNumberInAllBlocks() AS row_id, * FROM (' />
      <part name='TopSamplePercent' value='SELECT modulo(rand64(), 100000000) AS extr_rnd_samp_pcnt_id, * FROM (' />
      <part name='Select' value='SELECT %1' />
      <part name='From' value='FROM %1' />
      <part name='Where' value='WHERE %1' />
      <part name='Group' value='GROUP BY %1' />
      <part name='Having' value='HAVING %1' />
      <part name='OrderBy' value='ORDER BY %1' />
      <part name='TopSamplePercent' value=') WHERE lessOrEquals(extr_rnd_samp_pcnt_id, %1 * 1000000)' />
      <part name='TopSampleRecords' value=')), t2 AS (SELECT * FROM (SELECT *, rowNumberInAllBlocks() AS row_id FROM (SELECT row_id AS row_num FROM t1 ORDER BY rand64())) WHERE less(row_num, %1)) SELECT * FROM t1 WHERE t1.row_id IN (SELECT row_id FROM t2)' />
      <part name='Top' value=') LIMIT %1' />
    </format-select>
      <!--
      format-simple-case
      [Default]Case
      BalancedIIF
    -->
    <format-simple-case value='BalancedIIF' />
  </sql-format>
</dialect>